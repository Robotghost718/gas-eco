/* global utility */
/* exported Booking_ */
/**
 * @param {array} bookingData
 */
function Booking_(bookingData) {
  if (! bookingData) {
    throw 'Booking cannot be generated without booking data';
  }
  var dataIndex = {
    ID         : 0,
    START_TIME : 1,
    END_TIME   : 2,
    LOCATION   : 3,
    STUDENTS   : 4,
    CONTACT    : 5,
    PROJECT    : 6,
    TAPE       : 7,
    DOLBY      : 8,
    LIVE_ROOM  : 9,
    ITEMS      : 10
  };

  /**
   * handleSQLnull deals with the NULL string generated by MySQL
   * Appropriate for object because we have to follow RMSS for getting bookings
   * This would be updated if the bookings stop coming from RMSS/MySQL
   */
  function handleSQLnull(input) {
    if (input === 'NULL') {
      return null;
    }
    return input;
  }

  this.id = bookingData[dataIndex.ID];
  this.startTime = utility.date.getFormattedDate(bookingData[dataIndex.START_TIME]);
  this.endTime = utility.date.getFormattedDate(bookingData[dataIndex.END_TIME]);
  this.location = bookingData[dataIndex.LOCATION];
  this.bookedStudents = bookingData[dataIndex.STUDENTS];
  this.contact = handleSQLnull(bookingData[dataIndex.CONTACT]);
  this.project = bookingData[dataIndex.PROJECT];
  this.tape = Boolean(bookingData[dataIndex.TAPE]);
  this.items = handleSQLnull(bookingData[dataIndex.ITEMS]);
  
  // Getters
  
  this.getContact = function() { return this.contact; };
  this.getId = function() { return this.id; };
  this.getEndTime = function() { return this.endTime; };
  /**
   * @returns {string[][]} - 2d array of item info, null if no items
   */
  this.getItems = function() {
    if (typeof this.items != "string") {
      return null;
    }
    var items = this.items.split(',');
    items.forEach(function(item, index, array) {
      array[index] = item.split(';');
    });
    return items;
  };
  this.getLocation = function() { return this.location; };
  this.getProject = function() { return this.project; };
  this.getStartTime = function() { return this.startTime; };
  /**
   * @returns {string[]} - array of student names
   */
  this.getBookedStudents = function() {
    return this.bookedStudents.replace(/, /g, ',').split(',');
  };
  this.getTape = function() { return this.tape; };
  
  // Setters
  
  /** @param {string} */
  this.setContact = function(contact) {
    contact = this.nullStringHandler(contact);
    this.contact = contact;
    return this;
  };
  
  /** Note: setId not allowed, use new Booking_(id) as setId */
  
  /** @param {string} - formatted date */
  this.setEndTime = function(endTime) {
    this.endTime = String(endTime);
    return this;
  };
  
  /** @param {string} */
  this.setItems = function(items) {
    items = this.nullStringHandler(items);
    this.items = items;
    return this;
  };
  
  /** @param {string} */
  this.setLocation = function(location) {
    this.location = location;
    return this;
  };
  
  /** @param {string} */
  this.setProject = function(project) {
    this.project = project;
    return this;
  };
  
  /** @param {string} - formatted date */
  this.setStartTime = function(startTime) {
    this.startTime = String(startTime);
    return this;
  };
  
  /** @param {string} */
  this.setBookedStudents = function(students) {
    this.bookedStudents = students;
    return this;
  };
  
  /** @param {string} */
  this.setTape = function(tape) {
    this.tape = Boolean(tape);
    return this;
  };  
  return this;
}
